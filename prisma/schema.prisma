generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  LAUGH
  SAD
  ANGRY
}

model User {
  id        String    @id @default(cuid())
  firstName String?
  lastName  String?
  password  String?
  email     String    @unique
  birthDate DateTime?
  username  String?   @unique
  bio       String?
  avatar    String?
  banner    String?

  posts     Post[]
  comments  Comment[]
  reactions Reaction[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  friendships   Friendship[] @relation("UserFriendships")
  friendsWithMe Friendship[] @relation("FriendOf")

  conversationMembers ConversationMember[]
  groupMessages       GroupMessage[]
  notifications       Notification[]
  userSettings        UserSettings?
  accounts            Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Post {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  message    String
  datetime   DateTime   @default(now())
  image      String?
  visibility Visibility

  comments  Comment[]
  reactions Reaction[]
}

model Comment {
  id       String   @id @default(cuid())
  post     Post     @relation(fields: [postId], references: [id])
  postId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  message  String
  datetime DateTime @default(now())
}

model Reaction {
  id       String       @id @default(cuid())
  type     ReactionType
  user     User         @relation(fields: [userId], references: [id])
  userId   String
  post     Post         @relation(fields: [postId], references: [id])
  postId   String
  datetime DateTime     @default(now())

  @@unique([userId, postId])
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  message    String
  image      String?
  datetime   DateTime @default(now())
}

model Friendship {
  id        String   @id @default(cuid())
  user      User     @relation("UserFriendships", fields: [userId], references: [id])
  userId    String
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  friendId  String
  status    String
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())

  members  ConversationMember[]
  messages GroupMessage[]
}

model ConversationMember {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
}

model GroupMessage {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  message        String
  image          String?
  sentAt         DateTime     @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model UserSettings {
  id                   String   @id @default(cuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String
  theme                String   @default("light")
  language             String   @default("en")
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())

  @@unique([userId])
}
