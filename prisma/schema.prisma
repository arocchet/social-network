generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  firstName           String?
  lastName            String?
  password            String?
  email               String               @unique
  birthDate           DateTime?
  username            String?              @unique
  biography           String?
  avatar              String?
  banner              String?
  bannerId            String?
  visibility          ProfileVisibility    @default(PUBLIC)
  avatarId            String?
  comments            Comment[]
  conversationMembers ConversationMember[]
  friendsWithMe       Friendship[]         @relation("FriendOf")
  friendships         Friendship[]         @relation("UserFriendships")
  groupMessages       GroupMessage[]
  receivedMessages    Message[]            @relation("ReceivedMessages")
  sentMessages        Message[]            @relation("SentMessages")
  notifications       Notification[]
  posts               Post[]
  reactions           Reaction[]
  stories             Story[]
  userSettings        UserSettings?
  accounts            Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Post {
  id         String     @id @default(cuid())
  userId     String
  message    String
  datetime   DateTime   @default(now())
  image      String?
  visibility Visibility
  mediaId    String?
  comments   Comment[]
  user       User       @relation(fields: [userId], references: [id])
  reactions  Reaction[]
}

model Story {
  id         String     @id @default(cuid())
  userId     String
  datetime   DateTime   @default(now())
  media      String?
  visibility Visibility
  mediaId    String?
  reactions  Reaction[]
  user       User       @relation(fields: [userId], references: [id])
}

model Comment {
  id       String   @id @default(cuid())
  postId   String
  userId   String
  message  String
  datetime DateTime @default(now())
  post     Post     @relation(fields: [postId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Reaction {
  id       String       @id @default(cuid())
  type     ReactionType
  userId   String
  postId   String?
  datetime DateTime     @default(now())
  storyId  String?
  post     Post?        @relation(fields: [postId], references: [id])
  story    Story?       @relation(fields: [storyId], references: [id])
  user     User         @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, storyId])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  message    String
  image      String?
  datetime   DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String
  createdAt DateTime @default(now())
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  user      User     @relation("UserFriendships", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model Conversation {
  id        String               @id @default(cuid())
  title     String?
  isGroup   Boolean              @default(false)
  createdAt DateTime             @default(now())
  members   ConversationMember[]
  messages  GroupMessage[]
}

model ConversationMember {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, conversationId])
}

model GroupMessage {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  message        String
  image          String?
  sentAt         DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("light")
  language             String   @default("en")
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  LAUGH
  SAD
  ANGRY
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
}
