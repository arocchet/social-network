generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                              String               @id @default(cuid())
  firstName                                       String?
  lastName                                        String?
  password                                        String?
  email                                           String               @unique
  birthDate                                       DateTime?
  username                                        String?              @unique
  biography                                       String?
  avatar                                          String?
  banner                                          String?
  bannerId                                        String?
  avatarId                                        String?
  visibility                                      ProfileVisibility    @default(PUBLIC)
  comments                                        Comment[]
  Conversation                                    Conversation[]
  conversationMembers                             ConversationMember[]
  friendsWithMe                                   Friendship[]         @relation("FriendOf")
  friendships                                     Friendship[]         @relation("UserFriendships")
  GroupInvitation_GroupInvitation_invitedIdToUser GroupInvitation[]    @relation("GroupInvitation_invitedIdToUser")
  GroupInvitation_GroupInvitation_inviterIdToUser GroupInvitation[]    @relation("GroupInvitation_inviterIdToUser")
  GroupJoinRequest                                GroupJoinRequest[]
  GroupMember                                     GroupMember[]
  groupMessages                                   GroupMessage[]
  receivedMessages                                Message[]            @relation("ReceivedMessages")
  sentMessages                                    Message[]            @relation("SentMessages")
  notifications                                   Notification[]
  posts                                           Post[]
  reactions                                       Reaction[]
  stories                                         Story[]
  userSettings                                    UserSettings?
  accounts                                        Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Post {
  id         String     @id @default(cuid())
  userId     String
  message    String
  datetime   DateTime   @default(now())
  image      String?
  visibility Visibility
  mediaId    String?
  comments   Comment[]
  user       User       @relation(fields: [userId], references: [id])
  reactions  Reaction[]
}

model Story {
  id         String     @id @default(cuid())
  userId     String
  datetime   DateTime   @default(now())
  media      String?
  visibility Visibility
  mediaId    String?
  reactions  Reaction[]
  user       User       @relation(fields: [userId], references: [id])
}

model Comment {
  id       String     @id @default(cuid())
  postId   String
  userId   String
  message  String
  datetime DateTime   @default(now())
  post     Post       @relation(fields: [postId], references: [id])
  user     User       @relation(fields: [userId], references: [id])
  Reaction Reaction[]
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  userId    String
  postId    String?
  datetime  DateTime     @default(now())
  storyId   String?
  commentId String?
  Comment   Comment?     @relation(fields: [commentId], references: [id])
  post      Post?        @relation(fields: [postId], references: [id])
  story     Story?       @relation(fields: [storyId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, storyId])
  @@unique([userId, commentId])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  message    String
  image      String?
  datetime   DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String
  createdAt DateTime @default(now())
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  user      User     @relation("UserFriendships", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model Conversation {
  id               String               @id @default(cuid())
  title            String?
  isGroup          Boolean              @default(false)
  createdAt        DateTime             @default(now())
  ownerId          String?
  User             User?                @relation(fields: [ownerId], references: [id])
  members          ConversationMember[]
  GroupInvitation  GroupInvitation[]
  GroupJoinRequest GroupJoinRequest[]
  GroupMember      GroupMember[]
  messages         GroupMessage[]
}

model ConversationMember {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, conversationId])
}

model GroupMessage {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  message        String
  image          String?
  sentAt         DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("light")
  language             String   @default("en")
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])
}

model GroupInvitation {
  id                                   String           @id @default(cuid())
  groupId                              String
  inviterId                            String
  invitedId                            String
  status                               InvitationStatus @default(PENDING)
  createdAt                            DateTime         @default(now())
  Conversation                         Conversation     @relation(fields: [groupId], references: [id])
  User_GroupInvitation_invitedIdToUser User             @relation("GroupInvitation_invitedIdToUser", fields: [invitedId], references: [id])
  User_GroupInvitation_inviterIdToUser User             @relation("GroupInvitation_inviterIdToUser", fields: [inviterId], references: [id])

  @@unique([groupId, invitedId])
}

model GroupJoinRequest {
  id           String           @id @default(cuid())
  groupId      String
  seeker       String
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  Conversation Conversation     @relation(fields: [groupId], references: [id])
  User         User             @relation(fields: [seeker], references: [id])

  @@unique([groupId, seeker])
}

model GroupMember {
  id           String       @id @default(cuid())
  groupId      String
  userId       String
  joinedAt     DateTime     @default(now())
  Conversation Conversation @relation(fields: [groupId], references: [id])
  User         User         @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  LAUGH
  SAD
  ANGRY
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}
